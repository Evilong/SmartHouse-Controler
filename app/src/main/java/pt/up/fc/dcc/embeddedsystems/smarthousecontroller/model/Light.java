/*
 * Smart House
 * The API for the Smart House IOT project for embedded systems course
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package pt.up.fc.dcc.embeddedsystems.smarthousecontroller.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * Light
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-05T22:15:23.197Z")
public class Light {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("descriptio")
  private String descriptio = null;

  @SerializedName("turnOn")
  private Boolean turnOn = null;

  @SerializedName("threshold")
  private BigDecimal threshold = null;

  /**
   * Gets or Sets automatic
   */
  @JsonAdapter(AutomaticEnum.Adapter.class)
  public enum AutomaticEnum {
    AUTO("auto");

    private String value;

    AutomaticEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutomaticEnum fromValue(String text) {
      for (AutomaticEnum b : AutomaticEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AutomaticEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutomaticEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutomaticEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AutomaticEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("automatic")
  private AutomaticEnum automatic = null;

  public Light id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Light descriptio(String descriptio) {
    this.descriptio = descriptio;
    return this;
  }

   /**
   * Get descriptio
   * @return descriptio
  **/
  @ApiModelProperty(value = "")
  public String getDescriptio() {
    return descriptio;
  }

  public void setDescriptio(String descriptio) {
    this.descriptio = descriptio;
  }

  public Light turnOn(Boolean turnOn) {
    this.turnOn = turnOn;
    return this;
  }

   /**
   * Get turnOn
   * @return turnOn
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isTurnOn() {
    return turnOn;
  }

  public void setTurnOn(Boolean turnOn) {
    this.turnOn = turnOn;
  }

  public Light threshold(BigDecimal threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * Get threshold
   * @return threshold
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getThreshold() {
    return threshold;
  }

  public void setThreshold(BigDecimal threshold) {
    this.threshold = threshold;
  }

  public Light automatic(AutomaticEnum automatic) {
    this.automatic = automatic;
    return this;
  }

   /**
   * Get automatic
   * @return automatic
  **/
  @ApiModelProperty(required = true, value = "")
  public AutomaticEnum getAutomatic() {
    return automatic;
  }

  public void setAutomatic(AutomaticEnum automatic) {
    this.automatic = automatic;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Light light = (Light) o;
    return Objects.equals(this.id, light.id) &&
        Objects.equals(this.descriptio, light.descriptio) &&
        Objects.equals(this.turnOn, light.turnOn) &&
        Objects.equals(this.threshold, light.threshold) &&
        Objects.equals(this.automatic, light.automatic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, descriptio, turnOn, threshold, automatic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Light {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    descriptio: ").append(toIndentedString(descriptio)).append("\n");
    sb.append("    turnOn: ").append(toIndentedString(turnOn)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    automatic: ").append(toIndentedString(automatic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

